{"ast":null,"code":"var _jsxFileName = \"/Users/maxpinheiro/Documents/PersonalProjects/maxpinheiro.github.io/src/Portfolio.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { getAllSketches, getAllPaintings, getAllGraphics, getAllPieces, getRandomPiece } from \"./art-service\";\nimport BounceLoader from \"react-spinners/BounceLoader\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Portfolio() {\n  _s();\n\n  const [selectedType, setSelectedType] = useState(null);\n  const [pieces, setPieces] = useState(null); //const [loadedIdxs, setLoadedIdxs] = useState([]);\n\n  const [loadedCt, setLoadedCt] = useState(false);\n\n  function selectWorks(type) {\n    setSelectedType(type);\n    setPieces(null); //setLoadedIdxs([]);\n\n    setLoadedCt(0);\n\n    if (type === 'sketches') {\n      getAllSketches().then(pieces => setPieces(pieces));\n    }\n\n    if (type === 'paintings') {\n      getAllPaintings().then(pieces => setPieces(pieces));\n    }\n\n    if (type === 'graphic art') {\n      getAllGraphics().then(pieces => setPieces(pieces));\n    }\n\n    if (type === 'all pieces') {\n      getAllPieces().then(pieces => setPieces(shuffleArray(pieces)));\n    }\n\n    if (type === 'random piece') {\n      getRandomPiece().then(pieces => setPieces(pieces));\n    }\n  }\n\n  function shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n\n    return array;\n  }\n\n  const types = ['all pieces', 'paintings', 'sketches', 'graphic art', 'miscelaneous', 'random piece'];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid min-vh-100 bg-dark-violet\",\n    id: \"portfolio\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container d-flex flex-column justify-content-center py-1\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-center text-header\",\n        children: \"portfolio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), selectedType === null && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: types.map((type, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col border rounded-lg py-3 mx-3 pointer\",\n          onClick: () => selectWorks(type),\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-center text-white text-title\",\n            children: type\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 131\n          }, this)\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this), selectedType !== null && (pieces === null || loadedCt < pieces.length) && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex align-items-center flex-column\",\n        children: [/*#__PURE__*/_jsxDEV(BounceLoader, {\n          color: \"#FFFFFF\",\n          size: 60,\n          loading: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-center text-body\",\n          children: \"fetching artwork...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }, this), selectedType !== null && pieces !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [loadedCt === pieces.length && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"d-flex justify-content-center align-items-center mb-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn text-white\",\n            onClick: () => {\n              setSelectedType(null);\n              setPieces(null);\n              setLoadedCt(0);\n            },\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fas fa-arrow-left fa-2x\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 141\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-center text-medium my-auto ml-3\",\n            children: selectedType\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex flex-column align-items-center\",\n          children: [selectedType === 'random piece' && loadedCt === pieces.length && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-white text-heading pointer border border-white rounded-lg px-2\",\n            onClick: () => selectWorks('random piece'),\n            children: \"new random piece\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 33\n          }, this), selectedType === 'all pieces' && loadedCt === pieces.length && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-white text-heading pointer border border-white rounded-lg px-2\",\n            onClick: () => selectWorks('all pieces'),\n            children: \"shuffle pieces\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 33\n          }, this), pieces.map((_ref, idx) => {\n            let {\n              name,\n              url\n            } = _ref;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mb-3\",\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: url,\n                alt: name,\n                style: {\n                  maxHeight: \"70vh\",\n                  maxWidth: \"75vw\"\n                },\n                onLoad: () => setLoadedCt(prev => prev + 1)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 41\n              }, this), loadedCt === pieces.length && /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-center text-title text-white font-italic mt-1\",\n                children: name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 72\n              }, this)]\n            }, idx, true, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 37\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Portfolio, \"98ZBu+Ou7MSla6LifoxxOVQYpx8=\");\n\n_c = Portfolio;\nexport default Portfolio;\n\nvar _c;\n\n$RefreshReg$(_c, \"Portfolio\");","map":{"version":3,"sources":["/Users/maxpinheiro/Documents/PersonalProjects/maxpinheiro.github.io/src/Portfolio.js"],"names":["React","useState","getAllSketches","getAllPaintings","getAllGraphics","getAllPieces","getRandomPiece","BounceLoader","Portfolio","selectedType","setSelectedType","pieces","setPieces","loadedCt","setLoadedCt","selectWorks","type","then","shuffleArray","array","i","length","j","Math","floor","random","types","map","idx","name","url","maxHeight","maxWidth","prev"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport { getAllSketches, getAllPaintings, getAllGraphics, getAllPieces, getRandomPiece } from \"./art-service\";\nimport BounceLoader from \"react-spinners/BounceLoader\";\n\n\nfunction Portfolio() {\n    const [selectedType, setSelectedType] = useState(null);\n    const [pieces, setPieces] = useState(null);\n    //const [loadedIdxs, setLoadedIdxs] = useState([]);\n    const [loadedCt, setLoadedCt] = useState(false);\n\n    function selectWorks(type) {\n        setSelectedType(type);\n        setPieces(null);\n        //setLoadedIdxs([]);\n        setLoadedCt(0);\n\n        if (type === 'sketches') {\n            getAllSketches().then(pieces => setPieces(pieces))\n        }\n\n        if (type === 'paintings') {\n            getAllPaintings().then(pieces => setPieces(pieces))\n        }\n\n        if (type === 'graphic art') {\n            getAllGraphics().then(pieces => setPieces(pieces))\n        }\n\n        if (type === 'all pieces') {\n            getAllPieces().then(pieces => setPieces(shuffleArray(pieces)))\n        }\n\n        if (type === 'random piece') {\n            getRandomPiece().then(pieces => setPieces(pieces))\n        }\n    }\n\n    function shuffleArray(array) {\n        for (let i = array.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]];\n        }\n        return array\n    }\n\n    const types = ['all pieces', 'paintings', 'sketches', 'graphic art', 'miscelaneous', 'random piece']\n    return (\n        <div className=\"container-fluid min-vh-100 bg-dark-violet\" id=\"portfolio\">\n            <div className=\"container d-flex flex-column justify-content-center py-1\">\n                <p className=\"text-center text-header\">portfolio</p>\n                {\n                    selectedType === null && \n                    <div className=\"row\">\n                        {\n                            types.map((type, idx) => \n                            <div className=\"col border rounded-lg py-3 mx-3 pointer\" key={idx} onClick={() => selectWorks(type)} ><p className=\"text-center text-white text-title\">{type}</p></div>)\n                        }\n                        \n                    </div>\n                }\n                {\n                    selectedType !== null && (pieces === null || loadedCt < pieces.length) &&\n                    <div className=\"d-flex align-items-center flex-column\">\n                        \n                        <BounceLoader color=\"#FFFFFF\" size={60} loading={true} />\n                        <p className=\"text-center text-body\">fetching artwork...</p>\n                    </div>\n                }\n                {\n                    selectedType !== null && pieces !== null && \n                    <div>\n                        {\n                            loadedCt === pieces.length &&\n                            <span className=\"d-flex justify-content-center align-items-center mb-2\">\n                                <button className=\"btn text-white\" onClick={() => {setSelectedType(null); setPieces(null); setLoadedCt(0)}}><i className=\"fas fa-arrow-left fa-2x\"></i></button>\n                                <p className=\"text-center text-medium my-auto ml-3\">{selectedType}</p>\n                            </span>\n                        }\n                        \n                        \n                        <div className=\"d-flex flex-column align-items-center\">\n                            {\n                                selectedType === 'random piece' && loadedCt === pieces.length &&\n                                <p className=\"text-white text-heading pointer border border-white rounded-lg px-2\" onClick={() => selectWorks('random piece')}>new random piece</p>\n                            }\n                            {\n                                selectedType === 'all pieces' && loadedCt === pieces.length &&\n                                <p className=\"text-white text-heading pointer border border-white rounded-lg px-2\" onClick={() => selectWorks('all pieces')}>shuffle pieces</p>\n                            }\n                            {\n                                pieces.map(({name, url}, idx) => (\n                                    <div key={idx} className=\"mb-3\">\n                                        {/*<img src={url} alt={name} style={{maxWidth: \"25vw\"}} onLoad={() => setLoadedIdxs(prevLoaded => [...prevLoaded, idx])}/>*/}\n                                        {/*loadedIdxs.includes(idx) && <p className=\"text-center text-title text-white\">{name}</p>*/}\n                                        <img src={url} alt={name} style={{maxHeight: \"70vh\", maxWidth: \"75vw\"}} onLoad={() => setLoadedCt(prev => prev + 1)} />\n                                        {loadedCt === pieces.length && <p className=\"text-center text-title text-white font-italic mt-1\">{name}</p>}\n                                    </div>\n                                ))\n                            }\n                            \n                        </div>\n                    </div>\n                    \n                }\n                \n            </div>\n            \n        </div>\n    );\n}\n\nexport default Portfolio;"]},"metadata":{},"sourceType":"module"}